<!doctype html>
<html data-wf-page="6818de5ac4b4a83e41b4b510" data-wf-site="6818de59c4b4a83e41b4b3e9" lang="{{ request.locale.iso_code }}"><head><meta charset="utf-8">
<title>{{ page_title }}</title><meta content="{{ page_description }}" name="description">
<meta content="{{ page_title }}" property="og:title">
<meta content="{{ page_description }}" property="og:description">
<meta content="{{ page_title }}" property="twitter:title">
<meta content="{{ page_description }}" property="twitter:description">
<meta property="og:type" content="website">
<meta content="summary_large_image" name="twitter:card">
<meta content="width=device-width, initial-scale=1" name="viewport">
<meta content="Webflow" name="generator">
<link href="{{ 'normalize.css' | asset_url }}" rel="stylesheet" type="text/css">
<link href="{{ 'webflow.css' | asset_url }}" rel="stylesheet" type="text/css">
<link href="{{ 'elijasnature.webflow.css' | asset_url }}" rel="stylesheet" type="text/css">
<link href="https://fonts.googleapis.com" rel="preconnect">
<link href="https://fonts.gstatic.com" rel="preconnect" crossorigin="anonymous">
<script src="https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js" type="text/javascript"></script><script type="text/javascript">WebFont.load({  google: {    families: ["Work Sans:100,200,300,regular,500,600,700,800,900,100italic,200italic,300italic,italic,500italic,600italic,700italic,800italic,900italic","Cardo:regular,italic,700"]  }});</script><script type="text/javascript">!function(o,c){var n=c.documentElement,t=" w-mod-";n.className+=t+"js",("ontouchstart"in o||o.DocumentTouch&&c instanceof DocumentTouch)&&(n.className+=t+"touch")}(window,document);</script>
            {% if settings.favicon == blank %}
              <link href="{{ 'favicon.png' | asset_url }}" rel="shortcut icon" type="image/x-icon">
            {% else %}
              <link rel="shortcut icon" type="image/png" href="{{ settings.favicon | img_url: '32x32' }}">
            {% endif %}
        

            {% if settings.apple_touch_icon == blank %}
              <link href="{{ 'webclip.png' | asset_url }}" rel="apple-touch-icon">
            {% else %}
              <link rel="apple-touch-icon" type="image/png" href="{{ settings.apple_touch_icon | img_url: '32x32' }}">
            {% endif %}
        
<style>.w-webflow-badge {
  display: none !important;
  visibility: hidden !important;
}
</style><style>.nav_logo {
   transform: scale(1.1);
}
  .menu-overlay {
  opacity: 0;
  pointer-events: none;
  will-change: opacity;
}
  .menu-overlay.active {
  pointer-events: auto;
}
  body.menu-open {
  overflow: hidden;
  touch-action: none;
}
.dropdown-menu {
  opacity: 0;
  pointer-events: none;
  transition: transform 0.4s ease, opacity 0.4s ease;
  will-change: transform, opacity;
}
.dropdown-menu.active {
  transform: translateX(0);
  opacity: 1;
  pointer-events: auto;
}
[dropdown-animate] {
  opacity: 0;
  transform: translateX(-40px);
}
.nav-bg-overlay {
  height: 100%;
  opacity: 0;
  display: none;
  pointer-events: none;
  z-index: 1;
}
.nav-bg-overlay.visible {
  opacity: 1;
  display: block;
  pointer-events: auto;
  z-index: 1;
}
  .accordion-content-wrapper.few-items {
  display: flex;
  flex-direction: column;
  gap: 3vh;
}
  .close-menu-icon {
  opacity: 0;
  transition: opacity 0.2s ease;
}
[hover-target] {
  position: relative;
  display: flex;
  cursor: pointer;
}
[hover-target] .underline {
  width: 0%;
  transition: width 0.3s ease;
}
[hover-target]:hover .underline {
  width: 100%;
}
.footer-link,
.footer-copyright {
  font-size: 1.5vh !important;
  font-weight: 500;
  letter-spacing: 0.15vw;
  text-transform: uppercase;
  line-height: 100%;
  color: var(--granulated-sugar);
}
[hover-button] {
  position: relative;
  text-decoration: none;
  overflow: hidden;
}
[hover-button]::after {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.5),
    transparent
  );
  transition: left 0.5s ease;
  pointer-events: none;
}
[hover-button]:hover::after {
  left: 100%;
}
p {
  text-wrap: pretty;
  line-break: strict;
}
  .product-header_radio-button.w--redirected-focus {
  box-shadow: none;
}
  ::selection {
  color: #44241A;
  background: #EEDCCE;
}
::-moz-selection {
  color: #44241A;
  background: #EEDCCE;
}
 .predictive-search_component,
 .mini-cart_component {
  opacity: 0;
  visibility: hidden;
}
</style><style>/* ==============================
   RESPONSIVE &mdash; TABLET PORTRAIT ONLY
============================== */
@media (min-width: 1024px) and (max-width: 1440px) and (pointer: coarse) and (hover: none) and (orientation: portrait) {
.section_li-hero {
  max-height: 40vh;
  min-height: 40svh;
} 
    .toast-content {
    width: 90vw;
    flex-flow: row;
  }
  .small-brand-asset.category-section {
  width: 5vh;
}
    .small-brand-asset.bottom {
    width: 7.5vh;
  }
    .small-brand-asset {
    width: 6vh;
  }
    .description {
    font-size: 1.4vw;
  }
  .form_checkbox-label.text-size-tiny {
  font-size: 1.1vw;
}
  .text-size-tiny {
  font-size: 1.1vw;
}
    .footer-main-link {
    font-size: 1.5vw;
  }
  .text-field {
    padding-top: 2.1vw;
    padding-bottom: 2.2vw;
  }
  .text-field::placeholder {
    font-size: 1.3vw;
  }
    .large-button {
    font-size: 2vw;
  }
    .button.clear {
    font-size: 1.8vw;
  }
    .text-label-tag {
    font-size: 1vw;
  }
  .text-label {
  font-size: 2.2vw;
}
    .text-size-medium {
    font-size: 1.8vw;
  }
    .heading-style-h4 {
    font-size: 2vw;
  }
    .small-upper-title {
    font-size: 1.8vw;
}
  .content-image  {
    min-height: 35vh;
}
   .footer-bottom-link .footer-copyright {
    font-size: 0.9vw !important;
}  
   .other-4-text {
    font-size: 1.3vw;
}
  .notification-content {
  height: 3.5vw;
}  
  .nav_logo {
   width: 15vw; 
}  
  .nav_menu-button {
    z-index: 50;
    display: block;
}
  .menu-bars {
    width: 2.5vw;
    height: 2.5vw;
}
  .close-menu-icon {
    width: 2.5vw;
    height: 2.5vw;
} 
  .nav-close-button {
    width: 2.5vw;
    height: 2.5vw;
}   
  .icon-embed-xsmall {
  width: 2.5vw;
  height: 2.5vw;
}   
  .nav_shop-quantity {
    font-size: 1.5vw;
}
  .nav-text {
  font-size: 1.5vw;
}
  .text-size-regular {
  font-size: 1.3vw;
}
   .nav-link {
    display: none;
}
  .nav_container {
   padding-top: 1.2vh;
   padding-bottom: 1.2vh;
}
    .heading-style-h2 {
    font-size: 4vw;
}
   .button {
    font-size: 1.3vw;
}
  .text-field {
    font-size: 1.3vw;
  }
  .button-label {
    font-size: 1.3vw;
}
    .button-text {
    font-size: 1.3vw;
}
  .text-size-regular.smaller {
  font-size: 1vw;
}
  .heading-style-h3 {
  font-size: 3vw;
}
    .description.left.bigger.tighter-lines {
    font-size: 1.5vw;
  }
    .pop-up-text {
    font-size: 1vw;
  }
   .nav_shop-icons {
  column-gap: 2vw;
  row-gap: 2vw;  
 }
  }
/* ==============================
   RESPONSIVE &mdash; TABLET LANDSCAPE ONLY
============================== */
@media (min-width: 1024px) and (max-width: 1440px) and (pointer: coarse) and (hover: none) and (orientation: landscape) {
.section_li-hero {
  max-height: 70vh;
  min-height: 70svh;  
  }
    .dropdown-icon {
    width: 1.2vh;
    height: 1.2vh;
  }
    .icon-embed-xsmall {
    width: 2.3vh;
    height: 2.3vh;
  }
  .nav_shop-quantity {
    font-size: 1.4vh;
}    
  .nav-text {
    font-size: 1.4vh;
}
.hero_heading {
    font-size: 4.5vh;
}
.value-image-wrapper {
  width: 8vh;
  height: 8vh;
}
  .big-hero-heading {
  font-size: 5.5vh;
}
 .brand-statement {
    font-size: 6vh;
}
  .content-image  {
    min-height: 50vh;
}
  .heading-style-h2 {
    font-size: 3.8vh;
}
  .heading-style-h3 {
  font-size: 3.5vh;
}
.footer-logo {
  font-weight: 500;
  text-decoration: none;
  text-transform: uppercase;
}
.logo-wordmark {
  width: 13vh;
}
  .li-lang_dropdown {
    font-size: 1.2vh;
}
  .footer-bottom-link {
    font-size: 1.2vh;
}
    .footer-bottom-link .footer-copyright {
    font-size: 1.2vh !important;
}
  .social-icon {
    width: 1.8vh;
    height: 1.8vh;
}
 .footer_shipping-icon, 
 .footer_payment-icon {
    height: 2vh;
}
    .li-lang_dd-toggle {
    padding-top: 0.5vh;
    padding-right: 1vh;
    padding-bottom: 0.5vh;
    padding-left: 1vh;
}
    .small-upper-title {
    font-size: 2vh;
}
  .text-field::placeholder {
    font-size: 1.1vh;
}
    .text-field {
    padding-right: 3vh;
    padding-left: 3vh;
    font-size: 2vh;
}
  .button-label.text-color-white.version-two {
    font-size: 3.5vh;
}  
  .footer-main-link {
    font-size: 1.8vh;
}
  .button {
    font-size: 1.8vh;
}
  .button-label {
    font-size: 1.8vh;
}
   .nav_logo {
    width: 17vh; 
}
  .sample-section-image {
    aspect-ratio: 1 / 1;
    width: 100%; 
  }
}
</style><!--  Alpine Focus Plugin  -->
<script defer="" src="https://cdn.jsdelivr.net/npm/@alpinejs/focus@3.x.x/dist/cdn.min.js"></script><!--  Alpine JS  -->
<script defer="" src="{{ 'alpinejs3.js' | asset_url }}"></script><script defer="" auto="" min="" src="https://cdn.jsdelivr.net/gh/liquify-pro/core@latest/script.js"></script><link href="{{ canonical_url }}" rel="canonical">
<style>[x-cloak] { display: none !important; }
  [li-cloak_disabled] { display: none !important; }
/* Setup Font and Background Color if Text is selected */
</style><meta name="theme-color" content="#000" media="(prefers-color-scheme: light)">
<meta name="theme-color" content="#fff" media="(prefers-color-scheme: dark)">
<script type="application/ld+json">{
             "@context":"http:\/\/schema.org",
             "@type":"WebPage",
             "url":"{{ shop.url }}",
             "mainEntity":{"@type":"offerCatalog",
             "name": "{{ collection.title }}",
             "url": "{{ collection.url }}",
             "numberOfItems":{{ collection.products.size }}}
      }
</script><style>.filter_filters-wrapper.from-tablet {
    opacity: 0;
    visibility: hidden;
  }
  .filter-overlay-from-tablet {
    opacity: 0;
    visibility: hidden ;
    pointer-events: none ;
    background: rgba(0,0,0,0.3);
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
    z-index: 9998;
    will-change: opacity;
  }
.header_background-image-wrapper,
.hero-title,
.hero-subtitle {
  opacity: 0;
  visibility: hidden;     /* so autoAlpha:1 will set it visible */
}
/* For the zoom-out effect: */
.header_background-image-wrapper {
  transform: scale(1.4);  /* starting scale matches your GSAP set */
}
[fade-in] {
  opacity: 0;
  transform: translateY(50px);
  visibility: hidden;
  will-change: opacity, transform;
}
[fade-opacity] {
  opacity: 0;
  visibility: hidden;
  will-change: opacity;
}
</style><script src="{{ '_helper.js' | asset_url }}" type="text/javascript"></script>{{ content_for_header }}</head>
<body li-page="collection">

<div class="page-wrapper"><div class="full-page-wrapper"><div id="menuOverlay" aria-hidden="true" class="menu-overlay"></div>{% section 'ad_banner' %}
{% section 'navbar_default' %}
{% render 'global_styles' %}
 {{ content_for_layout }} {% section 'footer' %}
</div></div><script src="https://d3e54v103j8qbb.cloudfront.net/js/jquery-3.5.1.min.dc5e7f18c8.js?site=6818de59c4b4a83e41b4b3e9" type="text/javascript" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script><script src="{{ 'webflow.js' | asset_url }}" type="text/javascript"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/fontfaceobserver/2.1.0/fontfaceobserver.standalone.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/bodymovin/5.7.6/lottie.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>{% render 'search_javascript' %}
<script>// &mdash; prevent widows in paragraphs &mdash;
  function preventWidows(selector = 'p') {
    const paragraphs = document.querySelectorAll(selector);
    paragraphs.forEach(p => {
      if (!p.innerHTML.trim()) return;
      p.innerHTML = p.innerHTML.replace(/ ([^ ]*)$/, '&nbsp;$1');
    });
  }
  document.addEventListener("DOMContentLoaded", () => {
    preventWidows();
  });
</script><script>document.addEventListener('DOMContentLoaded', () => {
    // mark few-item accordions
    document.querySelectorAll('.accordion-content-wrapper').forEach(wrapper => {
      const links = wrapper.querySelectorAll('.accordion-link');
      if (links.length < 4) wrapper.classList.add('few-items');
    });
  });
  document.addEventListener('DOMContentLoaded', () => {
    console.log('&#9989; Single-navbar script loaded');
    // &mdash; grab elements &mdash;
    const menuTrigger   = document.querySelector('.nav_menu-button');
    const container     = document.querySelector('.nav_component');
    const dropdownMenu  = container?.querySelector('.dropdown-menu');
    const closeIcon     = container?.querySelector('.close-menu-icon');
    const menuOverlay   = document.querySelector('.menu-overlay');
    const animatedItems = dropdownMenu?.querySelectorAll('[dropdown-animate]') || [];
    const navBgOverlay  = container?.querySelector('.nav-bg-overlay');
    const navLogo       = container?.querySelector('.nav_logo');
    const desktopToggle = container?.querySelector('.nav_dropdown-toggle');
    if (!menuTrigger || !container || !dropdownMenu || !closeIcon
        || !menuOverlay || animatedItems.length === 0 || !navLogo) {
      console.warn('&#9888;&#65039; Missing required navbar elements');
      return;
    }
    // &mdash; ARIA: initial states &mdash;
    menuTrigger.setAttribute('aria-controls', dropdownMenu.id);
    menuTrigger.setAttribute('aria-expanded', 'false');
    menuTrigger.setAttribute('aria-haspopup', 'true');
    dropdownMenu.setAttribute('aria-hidden', 'true');
    menuOverlay.setAttribute('aria-hidden', 'true');
    // &#9472;&#9472;&#9472;&#9472;&#9472; overlay under navbar inside .full-page-wrapper &#9472;&#9472;&#9472;&#9472;&#9472; */
const wrapper = document.querySelector('.full-page-wrapper');
const navbar  = wrapper?.querySelector('.section_navbar');
if (wrapper && navbar) {
  /* wrapper = positioning context */
  wrapper.style.position = 'relative';
  /* move overlay right after the navbar (once) */
  if (menuOverlay.parentNode !== wrapper) {
    wrapper.insertBefore(menuOverlay, navbar.nextSibling);
    menuOverlay.style.display = 'block';
  }
  /* navbar must sit on top */
  navbar.style.position = 'sticky';
  navbar.style.top      = '0';
  navbar.style.zIndex   = '9999';
  /* overlay fills wrapper but stays below navbar */
  Object.assign(menuOverlay.style, {
    position:      'fixed',
    inset:         '0',
    pointerEvents: 'none',
    zIndex:        '99' 
  });
}
/* dropdown panel still on very top */
dropdownMenu.style.zIndex = '9999';
    // &mdash; GSAP initial states &mdash;
    gsap.set(dropdownMenu,   { xPercent: -100, autoAlpha: 0 });
    gsap.set(menuOverlay,    { autoAlpha: 0, pointerEvents: 'none' });
    gsap.set(closeIcon,      { autoAlpha: 0 });
    gsap.set(animatedItems,  { x: -40, autoAlpha: 0 });
    gsap.set(navLogo,        { scale: 1.1 });
    if (navBgOverlay) gsap.set(navBgOverlay,{ autoAlpha:0 });
    const itemTL = gsap.timeline({ paused: true })
      .fromTo(animatedItems,
        { x: -40, autoAlpha: 0 },
        { x: 0, autoAlpha: 1, duration: 0.3, stagger: 0.1, ease: 'power3.out' }
      );
    // &mdash; helpers for nav-bg fade and logo-scale &mdash;
    const threshold = document.body.scrollHeight * 0.01;
    function showNavBg(linear = false) {
      if (!navBgOverlay) return;
      gsap.killTweensOf(navBgOverlay);
      const ease = linear ? 'none' : 'power2.out',
            dur  = linear ? 0.3      : 0.4;
      navBgOverlay.classList.add('visible');
      gsap.to(navBgOverlay, { autoAlpha: 1, duration: dur, ease });
    }
    function hideNavBg() {
      if (!navBgOverlay) return;
      gsap.killTweensOf(navBgOverlay);
      gsap.to(navBgOverlay, {
        autoAlpha: 0, duration: 0.3, ease: 'none',
        onComplete: () => navBgOverlay.classList.remove('visible')
      });
    }
    function toggleLogoScale(atTop) {
      gsap.killTweensOf(navLogo);
      gsap.to(navLogo, { scale: atTop ? 1.1 : 1, duration: 0.3, ease: 'power2.out' });
    }
    // &mdash; scroll handler &mdash;
    let ticking = false;
    function onScroll() {
      const y    = window.scrollY;
      const open = dropdownMenu.classList.contains('active');
      if (!open) {
        if (y > threshold) showNavBg();
        else hideNavBg();
      }
      toggleLogoScale(y === 0);
      ticking = false;
    }
    window.addEventListener('scroll', () => {
      if (!ticking) {
        ticking = true;
        requestAnimationFrame(onScroll);
      }
    });
    onScroll();
    // &mdash; mobile open/close &mdash;
    function openMenu() {
      if (dropdownMenu.classList.contains('active')) return;
      window.closeAllAccordions?.();
      // overlay in
      menuOverlay.classList.add('active');
      gsap.to(menuOverlay, {
        autoAlpha: 1,
        duration: 0.2,
        ease: 'power1.out',
        onStart: () => menuOverlay.style.pointerEvents = 'auto'
      });
      showNavBg(true);
      // menu in
      dropdownMenu.classList.add('active');
      document.body.classList.add('menu-open');
      // &mdash; ARIA: menu opened &mdash;
      menuTrigger.setAttribute('aria-expanded', 'true');
      dropdownMenu.setAttribute('aria-hidden',  'false');
      menuOverlay.setAttribute('aria-hidden',  'false');
      // GSAP timeline
      gsap.set(closeIcon, { autoAlpha: 0 });
      gsap.to(dropdownMenu, {
        xPercent: 0, autoAlpha: 1, duration: 0.25, ease: 'power2.out',
        onStart: () => gsap.to(closeIcon, {
          autoAlpha: 1, duration: 0.15,
          delay: animatedItems.length * 0.06,
          ease: 'power2.out'
        }),
        onComplete: () => itemTL.restart()
      });
      // (optional) trap focus here, then: closeIcon.focus();
    }
    function closeMenu() {
      // hide icon + items
      gsap.to(closeIcon, { autoAlpha: 0, duration: 0.2, ease: 'power1.in' });
      gsap.to(animatedItems, {
        x: 20, autoAlpha: 0,
        duration: 0.15, stagger: 0.05, ease: 'power2.in'
      });
      // slide menu away
      gsap.timeline({ delay: 0.1 })
        .to(dropdownMenu, {
          xPercent: -100, duration: 0.25, ease: 'power3.in', clearProps: 'visibility'
        })
        .to(dropdownMenu, {
          autoAlpha: 0, duration: 0.15, ease: 'power1.in',
          onComplete: () => {
            dropdownMenu.classList.remove('active');
            document.body.classList.remove('menu-open');
            // &mdash; ARIA: menu closed &mdash;
            menuTrigger.setAttribute('aria-expanded', 'false');
            dropdownMenu.setAttribute('aria-hidden',  'true');
            menuOverlay.setAttribute('aria-hidden',  'true');
            // reset items & nav-bg
            gsap.set(animatedItems, { x: -40, autoAlpha: 0 });
            if (window.scrollY > threshold) showNavBg();
            else hideNavBg();
            // (optional) release focus trap, then: menuTrigger.focus();
          }
        }, '+=0.05');
      // fade out overlay
      gsap.to(menuOverlay, {
        autoAlpha: 0, duration: 0.25, ease: 'power2.in',
        onComplete: () => menuOverlay.classList.remove('active')
      });
    }
    // click handlers
    menuTrigger.addEventListener('click', () =>
      dropdownMenu.classList.contains('active') ? closeMenu() : openMenu()
    );
    closeIcon.addEventListener('click', closeMenu);
    menuOverlay.addEventListener('click', closeMenu);
    // &mdash; scroll listener for nav-bg (desktop menu closed) &mdash;
    window.addEventListener('scroll', () => {
      if (!navBgOverlay || dropdownMenu.classList.contains('active')) return;
      if (window.scrollY > threshold) showNavBg();
      else hideNavBg();
    });
    // &mdash; desktop toggle: always show nav-bg on open &mdash;
    desktopToggle?.addEventListener('click', () => {
      setTimeout(() => {
        const expanded = desktopToggle.getAttribute('aria-expanded') === 'true';
        if (expanded) showNavBg(true);
        else          onScroll();
      }, 0);
    });
    // &mdash; ACCORDION with Lottie & GSAP &mdash;
    const accordionItems = document.querySelectorAll('.accordion-item');
    accordionItems.forEach(item => {
      const header = item.querySelector('.accordion-header');
      const content = item.querySelector('.accordion-content');
      const icon = item.querySelector('.accordion-icon');
      if (!header || !content || !icon) return;
      const anim = lottie.loadAnimation({
        container: icon,
        renderer: 'svg',
        loop: false,
        autoplay: false,
        path: 'https://cdn.prod.website-files.com/6818de59c4b4a83e41b4b3e9/681b61dc0057d41705bc1703_plus-icon.json'
      });
      item.lottieInstance = anim;
      item.dataset.open   = "false";
      gsap.set(content, { height: 0, opacity: 0, overflow: 'hidden', display: 'none' });
      header.addEventListener('click', function () {
        const isOpen = item.dataset.open === "true";
        if (!isOpen) {
          // close others&hellip;
          accordionItems.forEach(other => {
            if (other !== item && other.dataset.open === "true") {
              other.dataset.open = "false";
              const oc = other.querySelector('.accordion-content');
              const oa = other.lottieInstance;
              gsap.to(oc, {
                height: 0, opacity: 0, duration: 0.4, ease: 'power2.inOut',
                onComplete: () => oc.style.display = 'none'
              });
              oa.setDirection(-1);
              oa.play();
              oa.addEventListener('complete', function reset() {
                oa.goToAndStop(0, true);
                oa.removeEventListener('complete', reset);
              });
            }
          });
        }
        // toggle this one
        item.dataset.open = isOpen ? "false" : "true";
        if (!isOpen) {
          content.style.display = 'block';
          const fullH = content.scrollHeight;
          gsap.fromTo(content,
            { height: 0, opacity: 0 },
            { height: fullH, opacity: 1, duration: 0.4, ease: 'power2.out' }
          );
          anim.setDirection(1);
          anim.play();
        } else {
          gsap.to(content, {
            height: 0, opacity: 0, duration: 0.4, ease: 'power2.inOut',
            onComplete: () => content.style.display = 'none'
          });
          anim.setDirection(-1);
          anim.play();
          anim.addEventListener('complete', function reset() {
            anim.goToAndStop(0, true);
            anim.removeEventListener('complete', reset);
          });
        }
      });
    });
    window.closeAllAccordions = function () {
      accordionItems.forEach(item => {
        if (item.dataset.open === "true") {
          item.dataset.open = "false";
          const content = item.querySelector('.accordion-content');
          const anim    = item.lottieInstance;
          gsap.to(content, {
            height: 0, opacity: 0, duration: 0.4, ease: 'power2.inOut',
            onComplete: () => content.style.display = 'none'
          });
          anim.setDirection(-1);
          anim.play();
          anim.addEventListener('complete', function reset() {
            anim.goToAndStop(0, true);
            anim.removeEventListener('complete', reset);
          });
        }
      });
    };
  });
</script><script>/* wait until selector appears */
function waitFor(sel, {timeout = 1e4} = {}) {
  return new Promise((res, rej) => {
    const n = document.querySelector(sel);
    if (n) return res(n);
    const mo = new MutationObserver(() => {
      const el = document.querySelector(sel);
      if (el) { mo.disconnect(); res(el); }
    });
    mo.observe(document.documentElement, {childList: true, subtree: true});
    setTimeout(() => { mo.disconnect(); rej(Error(`Timeout: ${sel}`)); }, timeout);
  });
}
async function initPredictiveSearch() {
  try {
    /* two triggers */
    const triggers = await Promise.all([
      waitFor('#search-toggle-desktop'),
      waitFor('#search-toggle-tablet')
    ]);
    const panel    = await waitFor('.predictive-search_component');
    const closeBtn = await waitFor('.predictive-search_component .nav-close-button');
    const overlay  = await waitFor('.menu-overlay');
    /* accessibility */
    panel.id = panel.id || 'predictive-search-dialog';
    const h2 = panel.querySelector('.heading-style-h2');
    if (h2) h2.id = h2.id || 'predictive-search-title';
    triggers.forEach(btn => {
      btn.setAttribute('aria-controls', panel.id);
      btn.setAttribute('aria-haspopup', 'dialog');
      btn.setAttribute('aria-expanded', 'false');
    });
    panel.setAttribute('role',           'dialog');
    panel.setAttribute('aria-modal',     'true');
    panel.setAttribute('aria-hidden',    'true');
    panel.setAttribute('aria-labelledby', h2 ? h2.id : '');
    panel.tabIndex = -1;
    closeBtn.setAttribute('aria-label', 'Close search');
    /* initial GSAP state */
    panel.style.visibility = 'hidden';
    requestAnimationFrame(() => {
      panel.style.visibility = 'visible';
      gsap.set(panel, { xPercent: 100, autoAlpha: 0, zIndex: 9999 });
    });
    /* overlay helpers */
    const enableOverlay = () => {
      overlay.classList.add('search-active');
      overlay.style.pointerEvents = 'auto';
      if (!overlay.classList.contains('active') &&
          !overlay.classList.contains('cart-active'))
        gsap.to(overlay, { autoAlpha: 1, duration: 0.3 });
      overlay.setAttribute('aria-hidden', 'false');
    };
    const disableOverlay = () => {
      overlay.classList.remove('search-active');
      overlay.style.pointerEvents = 'none';
      if (!overlay.classList.contains('active') &&
          !overlay.classList.contains('cart-active'))
        gsap.to(overlay, { autoAlpha: 0, duration: 0.3 });
      overlay.setAttribute('aria-hidden', 'true');
    };
    /* open / close */
    function openPanel(btn) {
      enableOverlay();
      panel.setAttribute('aria-hidden', 'false');
      btn.setAttribute('aria-expanded', 'true');
      btn.setAttribute('aria-label',    'Close search');
      gsap.to(panel, { xPercent: 0, autoAlpha: 1, duration: 0.3,
                       ease: 'power2.out', onComplete: () => panel.focus() });
    }
    function closePanel() {
      gsap.to(panel, { xPercent: 100, autoAlpha: 0, duration: 0.3,
                       ease: 'power2.in', onComplete: () => {
                         panel.setAttribute('aria-hidden', 'true');
                         triggers.forEach(b => {
                           b.setAttribute('aria-expanded', 'false');
                           b.setAttribute('aria-label',    'Open search');
                         });
                         triggers[0].focus();
                       }});
      disableOverlay();
    }
    /* toggle handler */
    const toggle = e => {
      const hidden = panel.getAttribute('aria-hidden') === 'true';
      hidden ? openPanel(e.currentTarget) : closePanel();
    };
    /* events */
    triggers.forEach(btn => btn.addEventListener('click', toggle));
    closeBtn .addEventListener('click', closePanel);
    overlay  .addEventListener('click', () => {
      if (overlay.classList.contains('search-active')) closePanel();
    });
    document.addEventListener('keydown', e => {
      if (e.key === 'Escape' && panel.getAttribute('aria-hidden') === 'false')
        closePanel();
    });
  } catch (err) {
    console.error('[Predictive-Search]', err.message);
  }
}
document.addEventListener('DOMContentLoaded', initPredictiveSearch);
</script><script>/* wait until selector exists (max 10 s) */
function waitFor(sel, {timeout = 1e4} = {}) {
  return new Promise((res, rej) => {
    const el = document.querySelector(sel);
    if (el) return res(el);
    const mo = new MutationObserver(() => {
      const n = document.querySelector(sel);
      if (n) { mo.disconnect(); res(n); }
    });
    mo.observe(document.documentElement, {childList: true, subtree: true});
    setTimeout(() => { mo.disconnect(); rej(Error(`Timeout: ${sel}`)); }, timeout);
  });
}
async function initMiniCart() {
  try {
    const openBtn  = await waitFor('#mini-cart-toggle');
    const panel    = await waitFor('.mini-cart_component');
    const pageWrap = await waitFor('.page-wrapper');
    const closeBtn = await waitFor('.nav-close-button');
    const overlay  = await waitFor('.menu-overlay');
    /* accessibility */
    panel.id = panel.id || 'mini-cart-dialog';
    const h2 = panel.querySelector('.heading-style-h2');
    if (h2) h2.id = h2.id || 'mini-cart-title';
    openBtn.setAttribute('aria-controls', panel.id);
    openBtn.setAttribute('aria-haspopup', 'dialog');
    openBtn.setAttribute('aria-expanded', 'false');
    openBtn.setAttribute('aria-label',    'Open cart');
    closeBtn.setAttribute('aria-label',   'Close cart');
    panel.setAttribute('role',            'dialog');
    panel.setAttribute('aria-modal',      'true');
    panel.setAttribute('aria-hidden',     'true');
    panel.setAttribute('aria-labelledby', h2 ? h2.id : '');
    panel.tabIndex = -1;
    /* overlay style tweaks */
    overlay.style.zIndex = '9998';
    /* avoid flash */
    panel.style.visibility = 'hidden';
    requestAnimationFrame(() => {
      panel.style.visibility = 'visible';
      gsap.set(panel, { xPercent: 100, autoAlpha: 0, zIndex: 9999 });
    });
    /* helpers */
    function enableOverlay() {
      overlay.classList.add('cart-active');
      overlay.style.pointerEvents = 'auto';
      if (!overlay.classList.contains('active'))
        gsap.to(overlay, { autoAlpha: 1, duration: 0.3 });
      overlay.setAttribute('aria-hidden', 'false');
    }
    function disableOverlay() {
      overlay.classList.remove('cart-active');
      overlay.style.pointerEvents = 'none';
      if (!overlay.classList.contains('active'))
        gsap.to(overlay, { autoAlpha: 0, duration: 0.3 });
      overlay.setAttribute('aria-hidden', 'true');
    }
    function openPanel() {
      enableOverlay();
      panel.setAttribute('aria-hidden', 'false');
      openBtn.setAttribute('aria-expanded', 'true');
      openBtn.setAttribute('aria-label',    'Close cart');
      gsap.to(panel, { xPercent: 0, autoAlpha: 1, duration: 0.3,
                       ease: 'power2.out', onComplete: () => panel.focus() });
    }
    function closePanel() {
      gsap.to(panel, { xPercent: 100, autoAlpha: 0, duration: 0.3,
                       ease: 'power2.in',  onComplete: () => {
                         panel.setAttribute('aria-hidden', 'true');
                         openBtn.setAttribute('aria-expanded', 'false');
                         openBtn.setAttribute('aria-label',    'Open cart');
                         openBtn.focus();
                       }});
      disableOverlay();
    }
    const toggle = () =>
      panel.getAttribute('aria-hidden') === 'true' ? openPanel() : closePanel();
    /* events */
    openBtn.addEventListener ('click', toggle);
    closeBtn.addEventListener('click', closePanel);
    overlay .addEventListener('click', () => {
      if (overlay.classList.contains('cart-active')) closePanel();
    });
    document.addEventListener('keydown', e => {
      if (e.key === 'Escape' && panel.getAttribute('aria-hidden') === 'false')
        closePanel();
    });
  } catch (err) {
    console.error('[Mini-Cart]', err.message);
  }
}
document.addEventListener('DOMContentLoaded', initMiniCart);
</script><script>//sortierung
  Shopify.queryParams = {};
  // Preserve existing query parameters
  if (location.search.length) {
    var params = location.search.substr(1).split('&');
    for (var i = 0; i < params.length; i++) {
      var keyValue = params[i].split('=');
      if (keyValue.length) {
        Shopify.queryParams[decodeURIComponent(keyValue[0])] = decodeURIComponent(keyValue[1]);
      }
    }
  }
  // Update sort_by query parameter on select change
  document.querySelector('#sort-by').addEventListener('change', function(e) {
    var value = e.target.value;
    Shopify.queryParams.sort_by = value;
    location.search = new URLSearchParams(Shopify.queryParams).toString();
  });
</script><script>// Register the plugin before any start/end calls
  gsap.registerPlugin(ScrollTrigger);
  document.addEventListener('DOMContentLoaded', () => {
    //
    // &#10122; HERO INTRO
    //
    gsap.set('.header_background-image-wrapper', { scale: 1.4, autoAlpha: 0 });
    gsap.set('.hero-title, .hero-subtitle', { y: 10, autoAlpha: 0 });
    gsap.timeline({
      defaults: { ease: 'power3.out' },
      delay: 0.5
    })
    .to('.header_background-image-wrapper', { scale: 1, autoAlpha: 1, duration: 1.2 })
    .to('.hero-title',    { y: 0, autoAlpha: 1, duration: 0.6 }, 0.4)
    .to('.hero-subtitle', { y: 0, autoAlpha: 1, duration: 0.6 }, 0.5);
    //
    // &#10123; SCROLL-IN FADE-INS (move + fade)
    //
    ScrollTrigger.batch('[fade-in]', {
      interval: 0.1,
      batchMax: 5,
      scrollTrigger: {
        start: 'top 50%',
        end:   'bottom 50%'
      },
      onEnter: batch => {
        gsap.to(batch, {
          y: 0,
          autoAlpha: 1,
          duration: 0.6,
          ease: 'power2.out',
          stagger: 0.15
        });
      },
      once: true
    });
    //
    // &#10124; PURE OPACITY FADE-INS (with custom start/end)
    //
    ScrollTrigger.batch('[fade-opacity]', {
      interval: 0.1,
      batchMax: 10,
      scrollTrigger: {
        start: 'top 75%',
        end:   'bottom 25%'
      },
      onEnter: batch => {
        gsap.to(batch, {
          autoAlpha: 1,
          duration: 1,
          stagger: 0.1
        });
      },
      once: true
    });
  });
</script><script>document.addEventListener('DOMContentLoaded', () => {
  const openBtn   = document.querySelector('.filter_tablet-filters-button');
  const closeBtn  = document.querySelector('.filter_tablet-modal-close-button');
  const panel     = document.querySelector('.filter_filters-wrapper.from-tablet');
  if (!openBtn || !closeBtn || !panel) return;
  // Set accessibility attributes
  panel.setAttribute('role', 'dialog');
  panel.setAttribute('aria-modal', 'true');
  panel.setAttribute('aria-hidden', 'true');
  panel.setAttribute('tabindex', '-1');
  const overlay = document.createElement('div');
  overlay.className = 'filter-overlay-from-tablet';
  overlay.setAttribute('aria-hidden', 'true');
  document.querySelector('.page-wrapper').append(overlay, panel);
  // Prevent flash of visible modal
  panel.style.visibility   = 'hidden';
  overlay.style.visibility = 'hidden';
  // Once DOM & GSAP is ready, make them visible (but still hidden visually)
  requestAnimationFrame(() => {
    panel.style.visibility   = 'visible';
    overlay.style.visibility = 'visible';
    gsap.set(panel,   { xPercent: 100, autoAlpha: 0, zIndex: 9999 });
    gsap.set(overlay, { autoAlpha: 0, pointerEvents: 'none', zIndex: 9998 });
  });
  function openPanel() {
    overlay.style.pointerEvents = 'auto';
    overlay.setAttribute('aria-hidden', 'false');
    panel.setAttribute('aria-hidden', 'false');
    gsap.to(overlay, { autoAlpha: 1, duration: 0.3 });
    gsap.to(panel, {
      xPercent: 0,
      autoAlpha: 1,
      duration: 0.3,
      ease: 'power2.out',
      onComplete: () => {
        panel.focus();
      }
    });
  }
  function closePanel() {
    gsap.to(overlay, {
      autoAlpha: 0,
      duration: 0.3,
      onComplete: () => overlay.style.pointerEvents = 'none'
    });
    gsap.to(panel, {
      xPercent: 100,
      autoAlpha: 0,
      duration: 0.3,
      ease: 'power2.in',
      onComplete: () => {
        panel.setAttribute('aria-hidden', 'true');
        overlay.setAttribute('aria-hidden', 'true');
        openBtn.focus(); // return focus to trigger
      }
    });
  }
  // Event bindings
  openBtn.addEventListener('click', openPanel);
  closeBtn.addEventListener('click', closePanel);
  overlay.addEventListener('click', closePanel);
  document.addEventListener('keydown', e => {
    if (e.key === 'Escape' && panel.getAttribute('aria-hidden') === 'false') {
      closePanel();
    }
  });
});
</script>
</body>
</html>